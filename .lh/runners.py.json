{
    "sourceFile": "runners.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 27,
            "patches": [
                {
                    "date": 1675153483684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1675153490186,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n \r\n from config import DEBUG\r\n from entity import FCFSQueue, Queue, RRQueue, Task, TimedQueue\r\n \r\n-#\r\n+#self.env.timeout\r\n class Layer2queue(object):\r\n     def __init__(self, env, T1, T2) -> None:\r\n         self.env = env\r\n         self.q1 = RRQueue(T1)\r\n"
                },
                {
                    "date": 1675153567690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,8 +58,9 @@\n \r\n             # Run task based on queue decipline\r\n             task, time = selected_q.get_job_with_wait_time()\r\n             self.is_cpu_busy = True\r\n+            #\r\n             yield self.env.timeout(time)\r\n             self.is_cpu_busy = False\r\n             task.run_for_n_time(time)\r\n \r\n"
                },
                {
                    "date": 1675153579226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n \r\n             # Run task based on queue decipline\r\n             task, time = selected_q.get_job_with_wait_time()\r\n             self.is_cpu_busy = True\r\n-            #\r\n+            #check condition \r\n             yield self.env.timeout(time)\r\n             self.is_cpu_busy = False\r\n             task.run_for_n_time(time)\r\n \r\n"
                },
                {
                    "date": 1675153593742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n \r\n             # Run task based on queue decipline\r\n             task, time = selected_q.get_job_with_wait_time()\r\n             self.is_cpu_busy = True\r\n-            #check condition \r\n+            #check condition z>time\r\n             yield self.env.timeout(time)\r\n             self.is_cpu_busy = False\r\n             task.run_for_n_time(time)\r\n \r\n"
                },
                {
                    "date": 1675153603360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n \r\n             # Run task based on queue decipline\r\n             task, time = selected_q.get_job_with_wait_time()\r\n             self.is_cpu_busy = True\r\n-            #check condition z>time\r\n+            #check condition z>time+wait\r\n             yield self.env.timeout(time)\r\n             self.is_cpu_busy = False\r\n             task.run_for_n_time(time)\r\n \r\n"
                },
                {
                    "date": 1675153956680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,8 +27,9 @@\n     def get_all_tasks(self) -> list[Task]:\r\n         return [*self.q1.q, *self.q2.q, *self.q3.q]\r\n \r\n     def choice_queue(self) -> tuple[TimedQueue, TimedQueue]:\r\n+        ##\r\n         not_empty_queues = []\r\n         if len(self.q1) != 0:\r\n             not_empty_queues.append(self.q1)\r\n         if len(self.q2) != 0:\r\n"
                },
                {
                    "date": 1675153963975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     def get_all_tasks(self) -> list[Task]:\r\n         return [*self.q1.q, *self.q2.q, *self.q3.q]\r\n \r\n     def choice_queue(self) -> tuple[TimedQueue, TimedQueue]:\r\n-        ##\r\n+        ##empty delete \r\n         not_empty_queues = []\r\n         if len(self.q1) != 0:\r\n             not_empty_queues.append(self.q1)\r\n         if len(self.q2) != 0:\r\n"
                },
                {
                    "date": 1675153973484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     def get_all_tasks(self) -> list[Task]:\r\n         return [*self.q1.q, *self.q2.q, *self.q3.q]\r\n \r\n     def choice_queue(self) -> tuple[TimedQueue, TimedQueue]:\r\n-        ##empty delete \r\n+        ##empty delete priority add\r\n         not_empty_queues = []\r\n         if len(self.q1) != 0:\r\n             not_empty_queues.append(self.q1)\r\n         if len(self.q2) != 0:\r\n"
                },
                {
                    "date": 1675154043922,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n             not_empty_queues.append(self.q3)\r\n \r\n         if len(not_empty_queues) == 0:\r\n             return None, None\r\n-\r\n+##\r\n         my_choice = choice(not_empty_queues)\r\n         if my_choice == self.q1:\r\n             return my_choice, self.q2\r\n         elif my_choice == self.q2:\r\n"
                },
                {
                    "date": 1675154051077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n             not_empty_queues.append(self.q3)\r\n \r\n         if len(not_empty_queues) == 0:\r\n             return None, None\r\n-##\r\n+##az priority \r\n         my_choice = choice(not_empty_queues)\r\n         if my_choice == self.q1:\r\n             return my_choice, self.q2\r\n         elif my_choice == self.q2:\r\n"
                },
                {
                    "date": 1675154062266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n             not_empty_queues.append(self.q3)\r\n \r\n         if len(not_empty_queues) == 0:\r\n             return None, None\r\n-##az priority \r\n+##az priority python estefade nashe\r\n         my_choice = choice(not_empty_queues)\r\n         if my_choice == self.q1:\r\n             return my_choice, self.q2\r\n         elif my_choice == self.q2:\r\n"
                },
                {
                    "date": 1675154071245,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n             not_empty_queues.append(self.q3)\r\n \r\n         if len(not_empty_queues) == 0:\r\n             return None, None\r\n-##az priority python estefade nashe\r\n+        ##az priority python estefade nashe\r\n         my_choice = choice(not_empty_queues)\r\n         if my_choice == self.q1:\r\n             return my_choice, self.q2\r\n         elif my_choice == self.q2:\r\n"
                },
                {
                    "date": 1675158804934,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n from random import choice\r\n-\r\n+from \r\n import numpy as np\r\n \r\n from config import DEBUG\r\n from entity import FCFSQueue, Queue, RRQueue, Task, TimedQueue\r\n"
                },
                {
                    "date": 1675158810086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n from random import choice\r\n-from \r\n+from helper import \r\n import numpy as np\r\n \r\n from config import DEBUG\r\n from entity import FCFSQueue, Queue, RRQueue, Task, TimedQueue\r\n"
                },
                {
                    "date": 1675158815800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n from random import choice\r\n-from helper import \r\n+from helper import generate_coosen_queue\r\n import numpy as np\r\n \r\n from config import DEBUG\r\n from entity import FCFSQueue, Queue, RRQueue, Task, TimedQueue\r\n"
                },
                {
                    "date": 1675158831968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n \r\n         if len(not_empty_queues) == 0:\r\n             return None, None\r\n         ##az priority python estefade nashe\r\n-        my_choice = choice(not_empty_queues)\r\n+        #my_choice = choice(not_empty_queues)\r\n         if my_choice == self.q1:\r\n             return my_choice, self.q2\r\n         elif my_choice == self.q2:\r\n             return my_choice, self.q3\r\n"
                },
                {
                    "date": 1675158925444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,8 +40,9 @@\n         if len(not_empty_queues) == 0:\r\n             return None, None\r\n         ##az priority python estefade nashe\r\n         #my_choice = choice(not_empty_queues)\r\n+        my\r\n         if my_choice == self.q1:\r\n             return my_choice, self.q2\r\n         elif my_choice == self.q2:\r\n             return my_choice, self.q3\r\n"
                },
                {
                    "date": 1675158960748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,10 +39,10 @@\n \r\n         if len(not_empty_queues) == 0:\r\n             return None, None\r\n         ##az priority python estefade nashe\r\n-        #my_choice = choice(not_empty_queues)\r\n-        my\r\n+        my_choice = choice(not_empty_queues)\r\n+        #my_choice=\r\n         if my_choice == self.q1:\r\n             return my_choice, self.q2\r\n         elif my_choice == self.q2:\r\n             return my_choice, self.q3\r\n"
                },
                {
                    "date": 1675159426381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n         if len(not_empty_queues) == 0:\r\n             return None, None\r\n         ##az priority python estefade nashe\r\n         my_choice = choice(not_empty_queues)\r\n-        #my_choice=\r\n+        #my_choice=choose_queue\r\n         if my_choice == self.q1:\r\n             return my_choice, self.q2\r\n         elif my_choice == self.q2:\r\n             return my_choice, self.q3\r\n"
                },
                {
                    "date": 1675159552384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,10 +39,10 @@\n \r\n         if len(not_empty_queues) == 0:\r\n             return None, None\r\n         ##az priority python estefade nashe\r\n-        my_choice = choice(not_empty_queues)\r\n-        #my_choice=choose_queue\r\n+        #my_choice = choice(not_empty_queues)\r\n+        #my_choice=choose_queue(not_empty_queues)\r\n         if my_choice == self.q1:\r\n             return my_choice, self.q2\r\n         elif my_choice == self.q2:\r\n             return my_choice, self.q3\r\n"
                },
                {
                    "date": 1675159912623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,10 +39,10 @@\n \r\n         if len(not_empty_queues) == 0:\r\n             return None, None\r\n         ##az priority python estefade nashe\r\n-        #my_choice = choice(not_empty_queues)\r\n-        #my_choice=choose_queue(not_empty_queues)\r\n+        my_choice = choice(not_empty_queues)\r\n+        my_choice=choose_queue(not_empty_queues)\r\n         if my_choice == self.q1:\r\n             return my_choice, self.q2\r\n         elif my_choice == self.q2:\r\n             return my_choice, self.q3\r\n"
                },
                {
                    "date": 1675160376253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n         self.env = env\r\n         self.q1 = RRQueue(T1)\r\n         self.q2 = RRQueue(T2)\r\n         self.q3 = FCFSQueue()\r\n-\r\n+        \r\n         self.is_cpu_busy = False\r\n         self.finalized_tasks: list[Task] = []\r\n \r\n         self.action = env.process(self.run())\r\n@@ -40,9 +40,9 @@\n         if len(not_empty_queues) == 0:\r\n             return None, None\r\n         ##az priority python estefade nashe\r\n         my_choice = choice(not_empty_queues)\r\n-        my_choice=choose_queue(not_empty_queues)\r\n+        #my_choice=choose_queue(not_empty_queues)\r\n         if my_choice == self.q1:\r\n             return my_choice, self.q2\r\n         elif my_choice == self.q2:\r\n             return my_choice, self.q3\r\n"
                },
                {
                    "date": 1675160399767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,14 +6,14 @@\n from entity import FCFSQueue, Queue, RRQueue, Task, TimedQueue\r\n \r\n #self.env.timeout\r\n class Layer2queue(object):\r\n-    def __init__(self, env, T1, T2) -> None:\r\n+    def __init__(self, env,z, T1, T2) -> None:\r\n         self.env = env\r\n         self.q1 = RRQueue(T1)\r\n         self.q2 = RRQueue(T2)\r\n         self.q3 = FCFSQueue()\r\n-        \r\n+        self.z=z\r\n         self.is_cpu_busy = False\r\n         self.finalized_tasks: list[Task] = []\r\n \r\n         self.action = env.process(self.run())\r\n"
                },
                {
                    "date": 1675160460162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,8 +63,9 @@\n             self.is_cpu_busy = True\r\n             #check condition z>time+wait\r\n             yield self.env.timeout(time)\r\n             self.is_cpu_busy = False\r\n+            if \r\n             task.run_for_n_time(time)\r\n \r\n             if not task.is_done():\r\n                 next_queue.add_to_queue(task)\r\n"
                },
                {
                    "date": 1675160625679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n             self.is_cpu_busy = True\r\n             #check condition z>time+wait\r\n             yield self.env.timeout(time)\r\n             self.is_cpu_busy = False\r\n-            if \r\n+            if task.time_waited\r\n             task.run_for_n_time(time)\r\n \r\n             if not task.is_done():\r\n                 next_queue.add_to_queue(task)\r\n"
                },
                {
                    "date": 1675160631843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n             self.is_cpu_busy = True\r\n             #check condition z>time+wait\r\n             yield self.env.timeout(time)\r\n             self.is_cpu_busy = False\r\n-            if task.time_waited>selected_q\r\n+            if task.time_waited>selected_\r\n             task.run_for_n_time(time)\r\n \r\n             if not task.is_done():\r\n                 next_queue.add_to_queue(task)\r\n"
                },
                {
                    "date": 1675160961197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n             #check condition z>time+wait\r\n             yield self.env.timeout(time)\r\n             self.is_cpu_busy = False\r\n             rand_z=np.random.exponential(self.z, size=1)[0]\r\n-            if task.time_waited>=rand_\r\n+            if task.time_waited>=rand_z\r\n                 task.is_dumped()\r\n \r\n             task.run_for_n_time(time)\r\n \r\n"
                }
            ],
            "date": 1675153483684,
            "name": "Commit-0",
            "content": "from random import choice\r\n\r\nimport numpy as np\r\n\r\nfrom config import DEBUG\r\nfrom entity import FCFSQueue, Queue, RRQueue, Task, TimedQueue\r\n\r\n#\r\nclass Layer2queue(object):\r\n    def __init__(self, env, T1, T2) -> None:\r\n        self.env = env\r\n        self.q1 = RRQueue(T1)\r\n        self.q2 = RRQueue(T2)\r\n        self.q3 = FCFSQueue()\r\n\r\n        self.is_cpu_busy = False\r\n        self.finalized_tasks: list[Task] = []\r\n\r\n        self.action = env.process(self.run())\r\n\r\n    def number_of_task_in_all_queues(self):\r\n        return len(self.q1) + len(self.q2) + len(self.q3)\r\n\r\n    def add_tasks(self, tasks):\r\n        self.q1.add_to_queue(tasks)\r\n\r\n    def get_all_tasks(self) -> list[Task]:\r\n        return [*self.q1.q, *self.q2.q, *self.q3.q]\r\n\r\n    def choice_queue(self) -> tuple[TimedQueue, TimedQueue]:\r\n        not_empty_queues = []\r\n        if len(self.q1) != 0:\r\n            not_empty_queues.append(self.q1)\r\n        if len(self.q2) != 0:\r\n            not_empty_queues.append(self.q2)\r\n        if len(self.q3) != 0:\r\n            not_empty_queues.append(self.q3)\r\n\r\n        if len(not_empty_queues) == 0:\r\n            return None, None\r\n\r\n        my_choice = choice(not_empty_queues)\r\n        if my_choice == self.q1:\r\n            return my_choice, self.q2\r\n        elif my_choice == self.q2:\r\n            return my_choice, self.q3\r\n        elif my_choice == self.q3:\r\n            return my_choice, None\r\n\r\n    def run(self):\r\n        while True:\r\n            # Choose a queue\r\n            selected_q, next_queue = self.choice_queue()\r\n            if selected_q == None:\r\n                # Bug must be fixed\r\n                yield self.env.timeout(1)\r\n                continue\r\n\r\n            # Run task based on queue decipline\r\n            task, time = selected_q.get_job_with_wait_time()\r\n            self.is_cpu_busy = True\r\n            yield self.env.timeout(time)\r\n            self.is_cpu_busy = False\r\n            task.run_for_n_time(time)\r\n\r\n            if not task.is_done():\r\n                next_queue.add_to_queue(task)\r\n            else:\r\n                self.finalized_tasks.append(task)\r\n                if DEBUG:\r\n                    print(f\"Task: {task} is completed\")\r\n\r\n\r\nclass JobLoader:\r\n    def __init__(self, env, k, update_interval, priority_queue, layer_2_queue) -> None:\r\n        self.env = env\r\n        self.priority_queue: Queue = priority_queue\r\n        self.layer_2_queue: Layer2queue = layer_2_queue\r\n\r\n        self.update_interval = update_interval\r\n\r\n        self.k = k\r\n\r\n        self.action = env.process(self.run())\r\n\r\n    def run(self):\r\n        while True:\r\n            yield self.env.timeout(self.update_interval)\r\n            # Load jobs from priority queue to main queues\r\n            if len(self.priority_queue.q) > 0:\r\n                if self.layer_2_queue.number_of_task_in_all_queues() < self.k:\r\n                    # Pop from layer 1 and move to layer 1\r\n                    tasks = self.priority_queue.pop_n_item(\r\n                        self.k - self.layer_2_queue.number_of_task_in_all_queues()\r\n                    )\r\n\r\n                    self.layer_2_queue.add_tasks(tasks)\r\n\r\n\r\nclass JobCreator:\r\n    def __init__(self, env, x, y, priority_queue: Queue, tasks_count) -> None:\r\n        self.env = env\r\n        self.priority_queue = priority_queue\r\n\r\n        self.x = x\r\n        self.y = y\r\n        self.tasks_count = tasks_count\r\n        self.created_tasks = 0\r\n\r\n        self.action = env.process(self.run())\r\n\r\n    def run(self):\r\n        while True:\r\n            # Add task to priority queue\r\n            next_arrival = np.random.poisson(self.x, size=1)[0]\r\n            yield self.env.timeout(next_arrival)\r\n            # Add to priority queue\r\n            self.priority_queue.q.append(Task.create_task(self.y, self.env.now))\r\n            # Break After max number of tasks reached\r\n            self.created_tasks += 1\r\n            if self.created_tasks == self.tasks_count:\r\n                break\r\n\r\n\r\nclass ResultCreator:\r\n    def __init__(self, env, priority_queue, layer2queue) -> None:\r\n        self.env = env\r\n        self.priority_queue: Queue = priority_queue\r\n        self.layer2queue: Layer2queue = layer2queue\r\n\r\n        self.queue_length = []\r\n        self.is_cpu_busy = []\r\n        self.action = env.process(self.run())\r\n\r\n    def run(self):\r\n        while True:\r\n            yield self.env.timeout(1)\r\n            self.queue_length.append(len(self.priority_queue))\r\n            self.is_cpu_busy.append(self.layer2queue.is_cpu_busy)\r\n\r\n            # Add time to tasks in priority queue\r\n            for i in self.priority_queue.q:\r\n                i.time_waited_in_layer1 += 1\r\n            # Add time to tasks in layer 2 tasks\r\n            for i in self.layer2queue.get_all_tasks():\r\n                i.time_waited_in_layer2 += 1\r\n\r\n    def print_results(self):\r\n        print(\r\n            \"Avarage Queue Length -> \",\r\n            round(sum(self.queue_length) / len(self.queue_length), 3),\r\n        )\r\n\r\n        wait_in_line1, wait_in_line2 = self.calc_wait_in_lines()\r\n        print(\r\n            \"Avarage Time in line 1 -> \",\r\n            round(wait_in_line1 / len(self.layer2queue.finalized_tasks), 3),\r\n        )\r\n        print(\r\n            \"Avarage Time in line 2 -> \",\r\n            round(wait_in_line2 / len(self.layer2queue.finalized_tasks), 3),\r\n        )\r\n\r\n        print(\r\n            \"Cpu utilization -> \",\r\n            round(sum(self.is_cpu_busy) / len(self.is_cpu_busy), 3),\r\n        )\r\n\r\n    def calc_wait_in_lines(self):\r\n        wait_in_line1 = 0\r\n        wait_in_line2 = 0\r\n        for i in self.layer2queue.finalized_tasks:\r\n            wait_in_line1 += i.time_waited_in_layer1\r\n            wait_in_line2 += i.time_waited_in_layer2\r\n        return wait_in_line1, wait_in_line2\r\n"
        }
    ]
}