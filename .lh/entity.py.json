{
    "sourceFile": "entity.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 42,
            "patches": [
                {
                    "date": 1675160497580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1675160517956,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n \r\n     def is_done(self):\r\n         return self.remaining_time <= 0\r\n \r\n-    \r\n+    def time\r\n     @classmethod\r\n     def create_task(self, y, arrival_time) -> \"Task\":\r\n         service_time = np.random.exponential(y, size=1)[0]\r\n         level = generate_priority()\r\n"
                },
                {
                    "date": 1675160523415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n \r\n     def is_done(self):\r\n         return self.remaining_time <= 0\r\n \r\n-    def time\r\n+    def time_waited\r\n     @classmethod\r\n     def create_task(self, y, arrival_time) -> \"Task\":\r\n         service_time = np.random.exponential(y, size=1)[0]\r\n         level = generate_priority()\r\n"
                },
                {
                    "date": 1675160529191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n \r\n     def is_done(self):\r\n         return self.remaining_time <= 0\r\n \r\n-    def time_waited\r\n+    def time_waited(self)\r\n     @classmethod\r\n     def create_task(self, y, arrival_time) -> \"Task\":\r\n         service_time = np.random.exponential(y, size=1)[0]\r\n         level = generate_priority()\r\n"
                },
                {
                    "date": 1675160537772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,10 @@\n \r\n     def is_done(self):\r\n         return self.remaining_time <= 0\r\n \r\n-    def time_waited(self)\r\n+    def time_waited(self):\r\n+        \r\n     @classmethod\r\n     def create_task(self, y, arrival_time) -> \"Task\":\r\n         service_time = np.random.exponential(y, size=1)[0]\r\n         level = generate_priority()\r\n"
                },
                {
                    "date": 1675160543489,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     def is_done(self):\r\n         return self.remaining_time <= 0\r\n \r\n     def time_waited(self):\r\n-        \r\n+        return seld\r\n     @classmethod\r\n     def create_task(self, y, arrival_time) -> \"Task\":\r\n         service_time = np.random.exponential(y, size=1)[0]\r\n         level = generate_priority()\r\n"
                },
                {
                    "date": 1675160550663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     def is_done(self):\r\n         return self.remaining_time <= 0\r\n \r\n     def time_waited(self):\r\n-        return seld\r\n+        return self.time_waited_in_layer1+sel\r\n     @classmethod\r\n     def create_task(self, y, arrival_time) -> \"Task\":\r\n         service_time = np.random.exponential(y, size=1)[0]\r\n         level = generate_priority()\r\n"
                },
                {
                    "date": 1675160562904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     def is_done(self):\r\n         return self.remaining_time <= 0\r\n \r\n     def time_waited(self):\r\n-        return self.time_waited_in_layer1+sel\r\n+        return self.time_waited_in_layer1+self.time_waited_in_layer2\r\n     @classmethod\r\n     def create_task(self, y, arrival_time) -> \"Task\":\r\n         service_time = np.random.exponential(y, size=1)[0]\r\n         level = generate_priority()\r\n"
                },
                {
                    "date": 1675160667356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,9 @@\n         return self.remaining_time <= 0\r\n \r\n     def time_waited(self):\r\n         return self.time_waited_in_layer1+self.time_waited_in_layer2\r\n+        \r\n     @classmethod\r\n     def create_task(self, y, arrival_time) -> \"Task\":\r\n         service_time = np.random.exponential(y, size=1)[0]\r\n         level = generate_priority()\r\n"
                },
                {
                    "date": 1675160674770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,11 +18,14 @@\n \r\n     def is_done(self):\r\n         return self.remaining_time <= 0\r\n \r\n+    def is_done(self):\r\n+        return self.remaining_time <= 0\r\n+        \r\n     def time_waited(self):\r\n         return self.time_waited_in_layer1+self.time_waited_in_layer2\r\n-        \r\n+\r\n     @classmethod\r\n     def create_task(self, y, arrival_time) -> \"Task\":\r\n         service_time = np.random.exponential(y, size=1)[0]\r\n         level = generate_priority()\r\n"
                },
                {
                    "date": 1675160693222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,11 +18,11 @@\n \r\n     def is_done(self):\r\n         return self.remaining_time <= 0\r\n \r\n-    def is_done(self):\r\n+    def is_(self):\r\n         return self.remaining_time <= 0\r\n-        \r\n+\r\n     def time_waited(self):\r\n         return self.time_waited_in_layer1+self.time_waited_in_layer2\r\n \r\n     @classmethod\r\n"
                },
                {
                    "date": 1675160718041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n \r\n     def is_done(self):\r\n         return self.remaining_time <= 0\r\n \r\n-    def is_(self):\r\n+    def is_dumped(self):\r\n         return self.remaining_time <= 0\r\n \r\n     def time_waited(self):\r\n         return self.time_waited_in_layer1+self.time_waited_in_layer2\r\n"
                },
                {
                    "date": 1675191078494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n     def is_dumped(self):\r\n         return self.remaining_time <= 0\r\n \r\n     def time_waited(self):\r\n-        return self.time_waited_in_layer1+self.time_waited_in_layer2\r\n+        return (self.time_waited_in_layer1+self.time_waited_in_layer2\r\n \r\n     @classmethod\r\n     def create_task(self, y, arrival_time) -> \"Task\":\r\n         service_time = np.random.exponential(y, size=1)[0]\r\n"
                },
                {
                    "date": 1675191126283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n     def is_dumped(self):\r\n         return self.remaining_time <= 0\r\n \r\n     def time_waited(self):\r\n-        return (self.time_waited_in_layer1+self.time_waited_in_layer2\r\n+        return self.time_waited_in_layer1+self.time_waited_in_layer2)\r\n \r\n     @classmethod\r\n     def create_task(self, y, arrival_time) -> \"Task\":\r\n         service_time = np.random.exponential(y, size=1)[0]\r\n"
                },
                {
                    "date": 1675191181074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,12 +19,12 @@\n     def is_done(self):\r\n         return self.remaining_time <= 0\r\n \r\n     def is_dumped(self):\r\n-        return self.remaining_time <= 0\r\n+        return self.remaining_time = 0\r\n \r\n     def time_waited(self):\r\n-        return self.time_waited_in_layer1+self.time_waited_in_layer2)\r\n+        return self.time_waited_in_layer1+self.time_waited_in_layer2\r\n \r\n     @classmethod\r\n     def create_task(self, y, arrival_time) -> \"Task\":\r\n         service_time = np.random.exponential(y, size=1)[0]\r\n"
                },
                {
                    "date": 1675191193454,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n         self.service_time = service_time\r\n         self.remaining_time = service_time\r\n         self.time_waited_in_layer1 = 0\r\n         self.time_waited_in_layer2 = 0\r\n+        \r\n \r\n     def run_for_n_time(self, n):\r\n         self.remaining_time -= n\r\n \r\n"
                },
                {
                    "date": 1675191200621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n         self.service_time = service_time\r\n         self.remaining_time = service_time\r\n         self.time_waited_in_layer1 = 0\r\n         self.time_waited_in_layer2 = 0\r\n-        \r\n+        self.dumped=false\r\n \r\n     def run_for_n_time(self, n):\r\n         self.remaining_time -= n\r\n \r\n"
                },
                {
                    "date": 1675191208431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n         self.service_time = service_time\r\n         self.remaining_time = service_time\r\n         self.time_waited_in_layer1 = 0\r\n         self.time_waited_in_layer2 = 0\r\n-        self.dumped=false\r\n+        self.dumped=False\r\n \r\n     def run_for_n_time(self, n):\r\n         self.remaining_time -= n\r\n \r\n"
                },
                {
                    "date": 1675191226045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,9 @@\n     def is_done(self):\r\n         return self.remaining_time <= 0\r\n \r\n     def is_dumped(self):\r\n+        self.remaining_time = 0\r\n         return self.remaining_time = 0\r\n \r\n     def time_waited(self):\r\n         return self.time_waited_in_layer1+self.time_waited_in_layer2\r\n"
                },
                {
                    "date": 1675191233990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n         return self.remaining_time <= 0\r\n \r\n     def is_dumped(self):\r\n         self.remaining_time = 0\r\n-        return self.remaining_time = 0\r\n+        self.\r\n \r\n     def time_waited(self):\r\n         return self.time_waited_in_layer1+self.time_waited_in_layer2\r\n \r\n"
                },
                {
                    "date": 1675191240304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n         return self.remaining_time <= 0\r\n \r\n     def is_dumped(self):\r\n         self.remaining_time = 0\r\n-        self.\r\n+        self.dumped=True\r\n \r\n     def time_waited(self):\r\n         return self.time_waited_in_layer1+self.time_waited_in_layer2\r\n \r\n"
                },
                {
                    "date": 1675191533259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,8 +67,9 @@\n \r\n     def __len__(self):\r\n         return len(self.q)\r\n \r\n+    \r\n \r\n class TimedQueue(Queue):\r\n     def get_job_with_wait_time(self) -> tuple[Task, int]:\r\n         raise NotImplementedError()\r\n"
                },
                {
                    "date": 1675191539610,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,12 +64,12 @@\n         items = self.q[:n]\r\n         del self.q[:n]\r\n         return items\r\n \r\n+    \r\n     def __len__(self):\r\n         return len(self.q)\r\n \r\n-    \r\n \r\n class TimedQueue(Queue):\r\n     def get_job_with_wait_time(self) -> tuple[Task, int]:\r\n         raise NotImplementedError()\r\n"
                },
                {
                    "date": 1675191544974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n         items = self.q[:n]\r\n         del self.q[:n]\r\n         return items\r\n \r\n-    \r\n+    def pop_\r\n     def __len__(self):\r\n         return len(self.q)\r\n \r\n \r\n"
                },
                {
                    "date": 1675191550740,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n         items = self.q[:n]\r\n         del self.q[:n]\r\n         return items\r\n \r\n-    def pop_\r\n+    def pop_n_pr\r\n     def __len__(self):\r\n         return len(self.q)\r\n \r\n \r\n"
                },
                {
                    "date": 1675191562075,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n         items = self.q[:n]\r\n         del self.q[:n]\r\n         return items\r\n \r\n-    def pop_n_pr\r\n+    def pop_n_priority\r\n     def __len__(self):\r\n         return len(self.q)\r\n \r\n \r\n"
                },
                {
                    "date": 1675191574333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,10 @@\n         items = self.q[:n]\r\n         del self.q[:n]\r\n         return items\r\n \r\n-    def pop_n_priority\r\n+    def pop_n_priority_item\r\n+\r\n     def __len__(self):\r\n         return len(self.q)\r\n \r\n \r\n"
                },
                {
                    "date": 1675191586461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n         items = self.q[:n]\r\n         del self.q[:n]\r\n         return items\r\n \r\n-    def pop_n_priority_item\r\n+    def pop_n_priority_item(self,n)\r\n \r\n     def __len__(self):\r\n         return len(self.q)\r\n \r\n"
                },
                {
                    "date": 1675191592868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,10 +64,10 @@\n         items = self.q[:n]\r\n         del self.q[:n]\r\n         return items\r\n \r\n-    def pop_n_priority_item(self,n)\r\n-\r\n+    def pop_n_priority_item(self,n):\r\n+        \r\n     def __len__(self):\r\n         return len(self.q)\r\n \r\n \r\n"
                },
                {
                    "date": 1675191606179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,11 @@\n         del self.q[:n]\r\n         return items\r\n \r\n     def pop_n_priority_item(self,n):\r\n-        \r\n+        items = self.q[:n]\r\n+        del self.q[:n]\r\n+        return items\r\n     def __len__(self):\r\n         return len(self.q)\r\n \r\n \r\n"
                },
                {
                    "date": 1675191620256,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,8 +65,9 @@\n         del self.q[:n]\r\n         return items\r\n \r\n     def pop_n_priority_item(self,n):\r\n+        \r\n         items = self.q[:n]\r\n         del self.q[:n]\r\n         return items\r\n     def __len__(self):\r\n"
                },
                {
                    "date": 1675191628352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n         del self.q[:n]\r\n         return items\r\n \r\n     def pop_n_priority_item(self,n):\r\n-        \r\n+        q=self.\r\n         items = self.q[:n]\r\n         del self.q[:n]\r\n         return items\r\n     def __len__(self):\r\n"
                },
                {
                    "date": 1675191635997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n         del self.q[:n]\r\n         return items\r\n \r\n     def pop_n_priority_item(self,n):\r\n-        q=self.\r\n+        q=self.q.s\r\n         items = self.q[:n]\r\n         del self.q[:n]\r\n         return items\r\n     def __len__(self):\r\n"
                },
                {
                    "date": 1675191646995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n         del self.q[:n]\r\n         return items\r\n \r\n     def pop_n_priority_item(self,n):\r\n-        q=self.q.s\r\n+        q=self.q.sort(key)\r\n         items = self.q[:n]\r\n         del self.q[:n]\r\n         return items\r\n     def __len__(self):\r\n"
                },
                {
                    "date": 1675191652485,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n         del self.q[:n]\r\n         return items\r\n \r\n     def pop_n_priority_item(self,n):\r\n-        q=self.q.sort(key)\r\n+        q=self.q.sort(key=lambda)\r\n         items = self.q[:n]\r\n         del self.q[:n]\r\n         return items\r\n     def __len__(self):\r\n"
                },
                {
                    "date": 1675191661047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n         del self.q[:n]\r\n         return items\r\n \r\n     def pop_n_priority_item(self,n):\r\n-        q=self.q.sort(key=lambda)\r\n+        q=self.q.sort(key=lambda x )\r\n         items = self.q[:n]\r\n         del self.q[:n]\r\n         return items\r\n     def __len__(self):\r\n"
                },
                {
                    "date": 1675191786935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n         del self.q[:n]\r\n         return items\r\n \r\n     def pop_n_priority_item(self,n):\r\n-        q=self.q.sort(key=lambda x )\r\n+        q=self.q.sort(key=lambda x :x.)\r\n         items = self.q[:n]\r\n         del self.q[:n]\r\n         return items\r\n     def __len__(self):\r\n"
                },
                {
                    "date": 1675191817146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n         del self.q[:n]\r\n         return items\r\n \r\n     def pop_n_priority_item(self,n):\r\n-        q=self.q.sort(key=lambda x :x.)\r\n+        self.q=self.q.sort(key=lambda x :x.priority)\r\n         items = self.q[:n]\r\n         del self.q[:n]\r\n         return items\r\n     def __len__(self):\r\n"
                },
                {
                    "date": 1675191834257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,8 +69,9 @@\n         self.q=self.q.sort(key=lambda x :x.priority)\r\n         items = self.q[:n]\r\n         del self.q[:n]\r\n         return items\r\n+        \r\n     def __len__(self):\r\n         return len(self.q)\r\n \r\n \r\n"
                },
                {
                    "date": 1675191884039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,13 +65,13 @@\n         del self.q[:n]\r\n         return items\r\n \r\n     def pop_n_priority_item(self,n):\r\n-        self.q=self.q.sort(key=lambda x :x.priority)\r\n+        self.q=self.q.sort(key=lambda x :x.priority,)\r\n         items = self.q[:n]\r\n         del self.q[:n]\r\n         return items\r\n-        \r\n+\r\n     def __len__(self):\r\n         return len(self.q)\r\n \r\n \r\n"
                },
                {
                    "date": 1675191890931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n         del self.q[:n]\r\n         return items\r\n \r\n     def pop_n_priority_item(self,n):\r\n-        self.q=self.q.sort(key=lambda x :x.priority,)\r\n+        self.q=self.q.sort(key=lambda x :x.priority,reverse=True)\r\n         items = self.q[:n]\r\n         del self.q[:n]\r\n         return items\r\n \r\n"
                },
                {
                    "date": 1675192242536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n         del self.q[:n]\r\n         return items\r\n \r\n     def pop_n_priority_item(self,n):\r\n-        self.q=self.q.sort(key=lambda x :x.priority,reverse=True)\r\n+        self.q.sort(key=lambda x :x.priority,reverse=True)\r\n         items = self.q[:n]\r\n         del self.q[:n]\r\n         return items\r\n \r\n"
                },
                {
                    "date": 1675192274073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n         del self.q[:n]\r\n         return items\r\n \r\n     def pop_n_priority_item(self,n):\r\n-        self.q.sort(key=lambda x :x.priority,reverse=True)\r\n+        self.q.sort(key=lambda x :x.priority.value,reverse=True)\r\n         items = self.q[:n]\r\n         del self.q[:n]\r\n         return items\r\n \r\n"
                }
            ],
            "date": 1675160497580,
            "name": "Commit-0",
            "content": "import numpy as np\r\n\r\nfrom enums import Level\r\nfrom helper import generate_priority\r\n\r\n\r\nclass Task:\r\n    def __init__(self, priority: Level, arrival_time, service_time) -> None:\r\n        self.arrival_time = arrival_time\r\n        self.priority = priority\r\n        self.service_time = service_time\r\n        self.remaining_time = service_time\r\n        self.time_waited_in_layer1 = 0\r\n        self.time_waited_in_layer2 = 0\r\n\r\n    def run_for_n_time(self, n):\r\n        self.remaining_time -= n\r\n\r\n    def is_done(self):\r\n        return self.remaining_time <= 0\r\n\r\n    \r\n    @classmethod\r\n    def create_task(self, y, arrival_time) -> \"Task\":\r\n        service_time = np.random.exponential(y, size=1)[0]\r\n        level = generate_priority()\r\n\r\n        return Task(level, arrival_time, service_time)\r\n\r\n    def __str__(self) -> str:\r\n        return (\r\n            f\"Task<arrival={self.arrival_time} service={self.service_time} remaining_time={self.remaining_time} \"\r\n            + f\"wait_1={self.time_waited_in_layer1} wait_2={self.time_waited_in_layer2}>\"\r\n        )\r\n\r\n    def __repr__(self) -> str:\r\n        return self.__str__()\r\n\r\n\r\nclass Queue:\r\n    def __init__(self) -> None:\r\n        self.q = []\r\n\r\n    def add_to_queue(self, item):\r\n        if isinstance(item, list):\r\n            self.q.extend(item)\r\n        else:\r\n            self.q.append(item)\r\n\r\n    def pop_fifo(self):\r\n        return self.q.pop(0)\r\n\r\n    def pop(self, n):\r\n        return self.q.pop(n)\r\n\r\n    def pop_n_item(self, n):\r\n        items = self.q[:n]\r\n        del self.q[:n]\r\n        return items\r\n\r\n    def __len__(self):\r\n        return len(self.q)\r\n\r\n\r\nclass TimedQueue(Queue):\r\n    def get_job_with_wait_time(self) -> tuple[Task, int]:\r\n        raise NotImplementedError()\r\n\r\n\r\nclass RRQueue(TimedQueue):\r\n    def __init__(self, time) -> None:\r\n        super().__init__()\r\n        self.time = time\r\n\r\n    def get_job_with_wait_time(self):\r\n        task: Task = self.q.pop()\r\n        return task, min(self.time, task.remaining_time)\r\n\r\n\r\nclass FCFSQueue(TimedQueue):\r\n    def get_job_with_wait_time(self):\r\n        task: Task = self.q.pop()\r\n        return task, task.service_time\r\n"
        }
    ]
}